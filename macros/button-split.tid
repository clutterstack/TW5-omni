title: $:/plugins/can/omni/buttons/split

\define splitsubtid() 
<$action-sendmessage
	$message="tm-edit-text-operation"
	$param="omnisplit"
	tagnew="yes"
/><<omni-submitedit-actions>>
<$vars first={{{[all[current]addsuffix[-1]]}}} second={{{[all[current]addsuffix[-2]]}}} third={{{[all[current]addsuffix[-3]]}}} >
    <$action-listops $tiddler=<<parentval>> $field='omni-list' $subfilter='+[insertbefore:first<third>] +[move<third>]' />
    <$action-listops $tiddler=<<parentval>> $field='omni-list' $subfilter='+[insertbefore:first<second>] +[move<second>]' />
</$vars>
\end

\define renamesubtids()
<!-- get the number of existing subtids -->
<!-- <$vars numtids=4> {{{[all[current]list[!!omni-list]is[tiddler]count[]]}}}> -->
<!-- for range  -->
<!-- <$list filter="[range<numtids>]" variable="num"> -->
<$vars num=4>
<$action-sendmessage $message="tm-rename-tiddler" from={{{[all[current]list[!!omni-list]is[tiddler]rest<num>first[]]}}} to={{{[all[current]addsuffix[-]addsuffix<num>]}}} />
<!-- </$list> -->
</$vars>
\end

\define slush()
<$action-sendmessage $message="tm-rename-tiddler" from=<<currentTiddler>> to={{{[all[current]addsuffix[-1]]}}} />
  <!-- copy selected text to a field on the state tiddler  -->
    <$action-sendmessage $message="tm-edit-text-operation" $param="save-selection" tiddler=<<annotstatetid>> field="highlighted" />
    <$action-sendmessage $message="tm-edit-text-operation" $param="replace-selection" text="%split-marker%" />
    <!--  copy the text before the split, if any, to a field -->
    <$action-setfield $tiddler=<<annotstatetid>> beforesplit={{{[<editstatetid>get[text]splitbefore[%split-marker%]removesuffix[%split-marker%]]}}} />
    <!-- copy the text after the split, if any, to another field -->
    <$action-setfield $tiddler=<<annotstatetid>> aftersplit={{{[<editstatetid>get[text]split[%split-marker%]butfirst[]]}}} />
    <!-- If there's something after the split marker, that goes into a new tiddler -->
    <$list filter="[<editstatetid>get[text]splitbefore[%split-marker%]removesuffix[%split-marker%]!is[blank]]" variable="ignore">
        <$action-createtiddler $basetitle={{{[<currentTiddler>addsuffix[-c]]}}} text={{{[<annotstatetid>get[aftersplit]]}}} >
            <$action-listops $tiddler=<<parentval>> $field='omni-list' $subfilter='+[insertbefore<createTiddler-title>] +[move<createTiddler-title>]' />
        </$action-createtiddler>
    </$list>
    <!--  If beforesplit has something in it, that's what stays in the original tiddler and we need to put the highlighted text into another tiddler -->
    <!-- <$list filter="[<annotstatetid>has[beforesplit]]" variable="ignore">
        <$action-createtiddler $basetitle={{{[<currentTiddler>addsuffix[-b]]}}} text={{{[<annotstatetid>get[highlighted]]}}}>
        <$action-listops $tiddler=<<parentval>> $field='omni-list' $subfilter='+[insertbefore<createTiddler-title>] +[move<createTiddler-title>]' />
        </$action-createtiddler>
    </$list> -->
        <!-- Now want the original tiddler to have the first non-empty text (so it stays with any annotation) -->
        <!-- Need to do this last because the filtered lists are looking at the text field (I think changing fields in editstatetid and -->
        <!-- filtering on them in the same action may not be allowed) -->
    <!-- <$action-setfield $tiddler=<<editstatetid>> text={{{[<annotstatetid>get[beforesplit]!is[blank]] ~[<annotstatetid>get[highlighted]]}}} /> -->
<$action-setfield text={{{[<editstatetid>get[text]split[%split-marker%]first[]]}}}/>
    <!-- <<omni-toggle-view>> -->
    <<omni-kb-canceledit-actions>>
    <$list filter=[is[current]get[text]trim[]is[blank]] variable=ignore>
        <$action-deletetiddler/>
    </$list>
    <!-- keep only the contents from before the split -->
    <!-- <$action-setfield text={{{[<oldtext>split[%split-marker%]first[]]}}} /> -->
<!-- </$vars> -->
\end

<!-- Need to inspect $:/core/ui/EditTemplate/body/editor further to get state tids etc right -->

<$button class="tc-btn-invisible omni-split-button" actions=<<splitsubtid>>>split</$button>

<!--  (parent is <<parentval>>; current is <<currentTiddler>>; editstate is <<editstatetid>>) -->

